export interface Message<T = string | Record<string, unknown>> {
    data: T;
    comment?: string;
    event?: string;
    id?: string;
    retry?: number;
}
export type EventOptions<T = string | Record<string, unknown>> = {
    beforeFn?: CustomFn<T>;
    afterFn?: CustomFn<T>;
};
export interface EventNotifier<T extends {
    update: T['update'] extends Message ? Message<T['update']>['data'] : never;
    complete: T['complete'] extends Message ? Message<T['complete']>['data'] : never;
    error: T['error'] extends Message ? Message<T['error']>['data'] : never;
    close: T['close'] extends Message ? Message<T['close']>['data'] : never;
} = any> {
    update: (message: Message<T['update']>['data'], opts?: EventOptions<Message<T['update']>['data']>) => void;
    complete: (message: Message<T['complete']>['data'], opts?: EventOptions<Message<T['complete']>['data']>) => void;
    error: (message: Message<T['error']>['data'], opts?: EventOptions<Message<T['error']>['data']>) => void;
    close: (message: Message<T['close']>['data'], opts?: EventOptions<Message<T['close']>['data']>) => void;
}
type CustomFn<T = string | Record<string, unknown>> = (data: T) => unknown;
export declare class Writer implements EventNotifier {
    readonly writer: WritableStreamDefaultWriter;
    readonly encoder: TextEncoder;
    constructor(writer: WritableStreamDefaultWriter, encoder: TextEncoder);
    writeMessage(writer: WritableStreamDefaultWriter, encoder: TextEncoder, message: Message): void;
    update(message: Message, opts?: EventOptions<any>): void;
    complete(message: Message, opts?: EventOptions<any>): void;
    error(message: Message, opts?: EventOptions<any>): void;
    close(message: Message, opts?: EventOptions<any>): void;
}
export declare const getSSEWriter: (writer: WritableStreamDefaultWriter, encoder: TextEncoder) => Writer;
export {};
