"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const writer_1 = require("./writer");
const utils = __importStar(require("./utils"));
describe('Writer class', () => {
    let mockWriter;
    let mockEncoder;
    let writerInstance;
    let toDataStringSpy;
    beforeEach(() => {
        mockWriter = {
            write: jest.fn(),
            close: jest.fn(),
        };
        mockEncoder = {
            encode: jest.fn((str) => str),
        };
        writerInstance = new writer_1.Writer(mockWriter, mockEncoder);
        toDataStringSpy = jest.spyOn(utils, 'toDataString');
    });
    describe('update', () => {
        it('should handle without customFn', () => {
            const mockMessage = { data: 'testData' };
            writerInstance.update(mockMessage);
            expect(toDataStringSpy).toHaveBeenCalledWith(mockMessage.data);
            expect(mockWriter.write).toHaveBeenCalled();
        });
        it('should handle with customFn', () => {
            const beforeFn = jest.fn();
            const afterFn = jest.fn();
            const mockMessage = { data: 'testData' };
            writerInstance.update(mockMessage, { beforeFn, afterFn });
            expect(beforeFn).toHaveBeenCalledWith(mockMessage);
            expect(afterFn).toHaveBeenCalledWith(mockMessage);
        });
    });
    describe('complete', () => {
        it('should handle without customFn', () => {
            const mockMessage = { data: 'testData' };
            writerInstance.complete(mockMessage);
            expect(toDataStringSpy).toHaveBeenCalledWith(mockMessage.data);
            expect(mockWriter.write).toHaveBeenCalled();
            expect(mockWriter.close).toHaveBeenCalled();
        });
        it('should handle with customFn', () => {
            const beforeFn = jest.fn();
            const afterFn = jest.fn();
            const mockMessage = { data: 'testData' };
            writerInstance.complete(mockMessage, { beforeFn, afterFn });
            expect(beforeFn).toHaveBeenCalledWith(mockMessage);
            expect(afterFn).toHaveBeenCalledWith(mockMessage);
        });
    });
    describe('error', () => {
        it('should handle without customFn', () => {
            const mockMessage = { data: 'testError' };
            writerInstance.error(mockMessage);
            expect(toDataStringSpy).toHaveBeenCalledWith(mockMessage.data);
            expect(mockWriter.write).toHaveBeenCalled();
            expect(mockWriter.close).toHaveBeenCalled();
        });
        it('should handle with customFn', () => {
            const beforeFn = jest.fn();
            const afterFn = jest.fn();
            const mockMessage = { data: 'testError' };
            writerInstance.error(mockMessage, { beforeFn, afterFn });
            expect(beforeFn).toHaveBeenCalledWith(mockMessage);
        });
    });
    describe('close', () => {
        it('should handle without customFn', () => {
            const mockData = 'closeData';
            writerInstance.close({ data: mockData });
            expect(mockWriter.close).toHaveBeenCalled();
        });
        it('should handle with customFn', () => {
            const beforeFn = jest.fn();
            const afterFn = jest.fn();
            const mockData = 'closeData';
            writerInstance.close({ data: mockData }, {
                beforeFn: beforeFn,
                afterFn: afterFn,
            });
            expect(beforeFn).toHaveBeenCalledWith(mockData);
            expect(afterFn).toHaveBeenCalledWith(mockData);
        });
    });
    describe('writeMessage', () => {
        const fullMessage = {
            data: 'data',
            comment: 'comment',
            event: 'event',
            id: '1',
            retry: 5,
        };
        it('should write full message', () => {
            writerInstance.writeMessage(mockWriter, mockEncoder, fullMessage);
            expect(mockEncoder.encode).toHaveBeenCalledWith(`: ${fullMessage.comment}\n`);
            expect(mockEncoder.encode).toHaveBeenCalledWith(`event: ${fullMessage.event}\n`);
            expect(mockEncoder.encode).toHaveBeenCalledWith(`id: ${fullMessage.id}\n`);
            expect(mockEncoder.encode).toHaveBeenCalledWith(`retry: ${fullMessage.retry}\n`);
            expect(toDataStringSpy).toHaveBeenCalledWith(fullMessage.data);
        });
        it('should write message without comment', () => {
            const messageWithoutComment = Object.assign(Object.assign({}, fullMessage), { comment: undefined });
            delete messageWithoutComment.comment;
            writerInstance.writeMessage(mockWriter, mockEncoder, messageWithoutComment);
            expect(mockEncoder.encode).not.toHaveBeenCalledWith(`: ${fullMessage.comment}\n`);
        });
        it('should write message without event', () => {
            const messageWithoutEvent = Object.assign(Object.assign({}, fullMessage), { event: undefined });
            delete messageWithoutEvent.event;
            writerInstance.writeMessage(mockWriter, mockEncoder, messageWithoutEvent);
            expect(mockEncoder.encode).not.toHaveBeenCalledWith(`event: ${fullMessage.event}\n`);
        });
        it('should write message without id', () => {
            const messageWithoutId = Object.assign(Object.assign({}, fullMessage), { id: undefined });
            delete messageWithoutId.id;
            writerInstance.writeMessage(mockWriter, mockEncoder, messageWithoutId);
            expect(mockEncoder.encode).not.toHaveBeenCalledWith(`id: ${fullMessage.id}\n`);
        });
        it('should write message without retry', () => {
            const messageWithoutRetry = Object.assign(Object.assign({}, fullMessage), { retry: undefined });
            writerInstance.writeMessage(mockWriter, mockEncoder, messageWithoutRetry);
            expect(mockEncoder.encode).not.toHaveBeenCalledWith(`retry: ${fullMessage.retry}\n`);
        });
        it('should write message without comment', () => {
            const messageWithoutComment = Object.assign(Object.assign({}, fullMessage), { comment: undefined });
            delete messageWithoutComment.comment;
            writerInstance.writeMessage(mockWriter, mockEncoder, messageWithoutComment);
            expect(mockEncoder.encode).not.toHaveBeenCalledWith(`: ${fullMessage.comment}\n`);
        });
    });
    describe('getSSEWriter', () => {
        it('should return an instance of Writer', () => {
            const instance = (0, writer_1.getSSEWriter)(mockWriter, mockEncoder);
            expect(instance).toBeInstanceOf(writer_1.Writer);
        });
    });
});
