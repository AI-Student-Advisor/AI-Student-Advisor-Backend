"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-empty-function */
const utils_1 = require("./utils"); // replace with your actual file name
describe('Utility functions', () => {
    describe('isNil', () => {
        it('should return true for undefined', () => {
            expect((0, utils_1.isNil)(undefined)).toBeTruthy();
        });
        it('should return true for null', () => {
            expect((0, utils_1.isNil)(null)).toBeTruthy();
        });
        it('should return false for other values', () => {
            expect((0, utils_1.isNil)('')).toBeFalsy();
            expect((0, utils_1.isNil)(0)).toBeFalsy();
            expect((0, utils_1.isNil)([])).toBeFalsy();
            expect((0, utils_1.isNil)({})).toBeFalsy();
            expect((0, utils_1.isNil)(() => { })).toBeFalsy();
        });
    });
    describe('isObject', () => {
        it('should return true for object literals', () => {
            expect((0, utils_1.isObject)({})).toBeTruthy();
            expect((0, utils_1.isObject)({ a: 1 })).toBeTruthy();
        });
        it('should return false for non-objects', () => {
            expect((0, utils_1.isObject)(null)).toBeFalsy();
            expect((0, utils_1.isObject)(undefined)).toBeFalsy();
            expect((0, utils_1.isObject)('string')).toBeFalsy();
            expect((0, utils_1.isObject)(1)).toBeFalsy();
        });
    });
    describe('isUndefined', () => {
        it('should return true for undefined', () => {
            expect((0, utils_1.isUndefined)(undefined)).toBeTruthy();
        });
        it('should return false for other values', () => {
            expect((0, utils_1.isUndefined)(null)).toBeFalsy();
            expect((0, utils_1.isUndefined)('')).toBeFalsy();
            expect((0, utils_1.isUndefined)(0)).toBeFalsy();
            expect((0, utils_1.isUndefined)([])).toBeFalsy();
            expect((0, utils_1.isUndefined)({})).toBeFalsy();
            expect((0, utils_1.isUndefined)(() => { })).toBeFalsy();
        });
    });
    describe('toDataString', () => {
        it('should process string correctly', () => {
            const input = 'Hello\nWorld\r\nHow\rAre You';
            const output = 'data: Hello\n\ndata: World\n\ndata: How\n\ndata: Are You\n\n';
            expect((0, utils_1.toDataString)(input)).toBe(output);
        });
        it('should process object correctly', () => {
            const input = { a: 1, b: 'string' };
            const output = 'data: {"a":1,"b":"string"}\n\n';
            expect((0, utils_1.toDataString)(input)).toBe(output);
        });
    });
});
