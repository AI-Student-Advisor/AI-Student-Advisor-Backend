"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSSEWriter = exports.Writer = void 0;
const utils_1 = require("./utils");
class Writer {
    constructor(writer, encoder) {
        this.writer = writer;
        this.encoder = encoder;
    }
    writeMessage(writer, encoder, message) {
        if (message.comment) {
            void writer.write(encoder.encode(`: ${message.comment}\n`));
        }
        if (message.event) {
            void writer.write(encoder.encode(`event: ${message.event}\n`));
        }
        if (message.id) {
            void writer.write(encoder.encode(`id: ${message.id}\n`));
        }
        if (message.retry) {
            void writer.write(encoder.encode(`retry: ${message.retry}\n`));
        }
        if (message.data) {
            void writer.write(encoder.encode((0, utils_1.toDataString)(message.data)));
        }
    }
    update(message, opts) {
        if (opts === null || opts === void 0 ? void 0 : opts.beforeFn) {
            opts.beforeFn(message);
        }
        this.writeMessage(this.writer, this.encoder, message);
        if (opts === null || opts === void 0 ? void 0 : opts.afterFn) {
            opts.afterFn(message);
        }
    }
    complete(message, opts) {
        if (opts === null || opts === void 0 ? void 0 : opts.beforeFn) {
            opts.beforeFn(message);
        }
        this.writeMessage(this.writer, this.encoder, message);
        void this.writer.close();
        if (opts === null || opts === void 0 ? void 0 : opts.afterFn) {
            opts.afterFn(message);
        }
    }
    error(message, opts) {
        if (opts === null || opts === void 0 ? void 0 : opts.beforeFn) {
            opts.beforeFn(message);
        }
        this.writeMessage(this.writer, this.encoder, message);
        if (opts === null || opts === void 0 ? void 0 : opts.afterFn) {
            opts.afterFn(message);
        }
        void this.writer.close();
    }
    close(message, opts) {
        if (opts === null || opts === void 0 ? void 0 : opts.beforeFn) {
            opts.beforeFn(message.data);
        }
        if (opts === null || opts === void 0 ? void 0 : opts.afterFn) {
            opts.afterFn(message.data);
        }
        void this.writer.close();
    }
}
exports.Writer = Writer;
const getSSEWriter = (writer, encoder) => new Writer(writer, encoder);
exports.getSSEWriter = getSSEWriter;
